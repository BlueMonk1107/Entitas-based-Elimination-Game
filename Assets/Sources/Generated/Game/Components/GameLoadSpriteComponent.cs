//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public LoadSpriteComponent loadSprite { get { return (LoadSpriteComponent)GetComponent(GameComponentsLookup.LoadSprite); } }
    public bool hasLoadSprite { get { return HasComponent(GameComponentsLookup.LoadSprite); } }

    public void AddLoadSprite(string newPath) {
        var index = GameComponentsLookup.LoadSprite;
        var component = CreateComponent<LoadSpriteComponent>(index);
        component.path = newPath;
        AddComponent(index, component);
    }

    public void ReplaceLoadSprite(string newPath) {
        var index = GameComponentsLookup.LoadSprite;
        var component = CreateComponent<LoadSpriteComponent>(index);
        component.path = newPath;
        ReplaceComponent(index, component);
    }

    public void RemoveLoadSprite() {
        RemoveComponent(GameComponentsLookup.LoadSprite);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherLoadSprite;

    public static Entitas.IMatcher<GameEntity> LoadSprite {
        get {
            if (_matcherLoadSprite == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.LoadSprite);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherLoadSprite = matcher;
            }

            return _matcherLoadSprite;
        }
    }
}
